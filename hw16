#---------------------------------------Задание № 1-----------------------------------------------
"""
задача
Дан текстовый файл. Написать функцию,
которая будет подсчитывать количество чисел в строке,
которые отделены пробелами, возвращаемое значение должно быть типа int.
Применить эту функцию для файла и найти общее кол-во таких чисел
"""
def count_digits(s:str):
    count = 0
    s = s.replace('.','')
    s = s.replace(',','')
    s = s.split()
    for i in range(len(s)):
        if s[i][:1:] == '-' and s[i][1::].isdigit() or s[i].isdigit():
            count += 1
    return count

with open('1.txt', 'r+') as f:
    lines = f.read()
    print(count_digits(lines))
#-------------------------------------------------------------------------------------------------
#---------------------------------------Задание № 2-----------------------------------------------
"""
задача

Дан текстовый файл. Написать функцию, которая составляет шифр для цифр
(шифр можете придумать свой, вот пример 1 → ! | 2 → @  | 3 → #  |  4 → $  и т.д.),
возвращаемое значение должно быть типа string.
Применить эту функция для файла и заменить все цифры на зашифрованные значения
"""
def encryption(s):
    d = {'1': '!', '2': '@', '3': '#', '4': '$', '5': '%', '6': '^', '7': '&', '8': '*', '9': '(', '0': ')'}
    for letter in s:
        if letter.isdigit():
            s = s.replace(letter, d[letter])
    return s
with open('1.txt', 'r+') as f:
    lines = f.read()
    print(encryption(lines))
#-------------------------------------------------------------------------------------------------
#---------------------------------------Задание № 3-----------------------------------------------
"""
задача
Системный администратор раз в неделю создаёт архив пользовательских файлов.
Однако объём диска, куда он помещает архив, может быть меньше, чем суммарный объём архивируемых файлов.
Известно, какой объём занимает файл каждого пользователя.

По заданной информации об объёме файлов пользователей и свободном объёме на
архивном диске определите максимальное число пользователей, чьи файлы можно сохранить в архиве,
а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии,
что сохранены файлы максимально возможного числа пользователей.

Входные данные.

https://inf-ege.sdamgia.ru/doc/inf/zadanie26/26_demo.txt 
"""
with open('1.txt', 'r+') as f:
    digits = f.read().split()
    int_digits = list(map(lambda digit: int(digit), digits))

s = int_digits.pop(0) # удаляем и возвращаем 1-ый элемент
n = int_digits.pop(0) # удаляем и возвращаем 2-ый элемент

# теперь находим максимальное кол-во пользователей,
# сортируя файлы по объему и суммируя их в пределах свободного места на диске

int_digits.sort()
count_users = 0 # Кол-во пользователей
sum_file_size = 0 # суммарный объем файлов пользователей
if sum(int_digits) > s:
    while sum_file_size <= s - int_digits[count_users]:
        sum_file_size = sum_file_size + int_digits[count_users]
        count_users += 1
    print(f'максимальное кол-во пользоватлей равно {count_users}')
else: print(f'максимальное кол-во пользоватлей равно {n}')

# Ищем максимальный объем файла

while n >= count_users:
    max_file_size = int_digits[n - 1]  # максимальный объем файла - последний элемент списка
    if sum(int_digits[0: count_users - 1], max_file_size) <= s:
        print(f'максимальный объем файла равен {max_file_size}')
        break
    n -= 1
#-------------------------------------------------------------------------------------------------
