#------------------------------Задание № 1--------------------------------------------------------------
"""
# # дан  список
# # запрещено использовать sort, max, map преобразовывать список в другие типы тоже нельзя
# # найти минимальный элемент в списке
"""

# Создаем рандомный список из 10 элементов
from random import*
l = []
n = 10
for i in range(n):
    l.append(randint(-100, 100))
print(l) # Проверка сгенерированного списка
# Ищем min элемент
min_el = l[0]
for i, el in enumerate(l):
    if min_el >= el:
        min_el = el
print(min_el) # Вывод min элемента списка

#-------------------------------------------------------------------------------------------------------
#------------------------------Задание № 2--------------------------------------------------------------
"""
# # дан  список
# # запрещено использовать sort, max, count, map преобразовывать список в другие типы тоже нельзя
# # найти элемент(ы) в списке, который повторяется дважды и более раз
"""
# Создаем рандомный список из элементов
from random import*
l = []
n = 20
for i in range(n):
    l.append(randint(-100, 100))
print(l) # Проверка сгенерированного списка
new_list = []
for i in range(len(l) - 1):
    for k in range(i + 1, len(l)):
        if l[i] == l[k]:
            if l[i] not in new_list:
                new_list.append(l[i])
print(new_list)
#-------------------------------------------------------------------------------------------------------
#------------------------------Задание № 3--------------------------------------------------------------
from random import*
l = []
n = 10
for i in range(n):
    l.append(randint(-100, 100))
print(l) # Проверка сгенерированного списка
new_list = []
for i in range(len(l)):
    if l[i] % 2 == 0:
        new_list.append(l[i])
print(new_list)
#-------------------------------------------------------------------------------------------------------
#------------------------------Задание № 4--------------------------------------------------------------
"""
# # дан  список
# запрещено использовать sort, max, count, sum, map
# # удалить из этого списка, все отрицательные элементы
"""
from random import*
l = []
n = 10
for i in range(n):
    l.append(randint(-100, 100))
print(l) # Проверка сгенерированного списка
new_list = []
for i in range(len(l)):
    if l[i] >= 0:
        new_list.append(l[i])
print(new_list)
#-------------------------------------------------------------------------------------------------------
#------------------------------Задание № 5--------------------------------------------------------------
"""
# # дан  список
# # найти все элементы в этом списке,
из которых извлекается квадратный корень в виде целого числа (4, 16 и т.д.)
"""
from random import*
l = []
n = 10
for i in range(n):
    l.append(randint(-100, 100))
print(l) # Проверка сгенерированного списка
for i in range(len(l)):
    if l[i] >= 0 and int(l[i] ** 0.5) == l[i] ** 0.5:
        print(l[i])
#-------------------------------------------------------------------------------------------------------
#------------------------------Задание № 6--------------------------------------------------------------
"""
# # дан  список
# # найти  все элементы в этом списке,
у которых индекс и значение совпадают. Исходный список нельзя менять 
"""
from random import*
l = []
n = 10
for i in range(n):
    l.append(randint(-100, 100))
print(l) # Проверка сгенерированного списка
for i, el in enumerate(l):
    if i + 1 == el:
        print(el)
#-------------------------------------------------------------------------------------------------------
#------------------------------Задание № 7--------------------------------------------------------------
"""
# # дан  список
# # запрещено использовать sort, max, count, sum, map,
преобразовывать список в другие типы тоже нельзя
# # найти произведение всех элементов в этом списке
"""
from random import*
l = []
n = 3
for i in range(n):
    l.append(randint(-100, 100))
print(l) # Проверка сгенерированного списка
result = 1
for i, el in enumerate(l):
    result = result * el
print(result)
#-------------------------------------------------------------------------------------------------------
